name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  markdown-lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install markdownlint-cli
      run: npm install -g markdownlint-cli
    - name: Lint Markdown files
      run: markdownlint "**/*.md" --config .markdownlint.json

  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov black ruff mypy
    - name: Lint with black
      run: |
        black --check src tests
    - name: Lint with ruff
      run: |
        ruff src tests
    - name: Type check with mypy
      run: |
        mypy src tests
    - name: Test with pytest
      run: |
        pytest --cov=src tests/

  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'src/frontend/package.json'
    - name: Install dependencies
      run: |
        cd src/frontend
        npm ci
    - name: Lint with ESLint
      run: |
        cd src/frontend
        npm run lint
    - name: Format check with Prettier
      run: |
        cd src/frontend
        npx prettier --check "src/**/*.{ts,tsx,css,html}"
    - name: Test with Vitest
      run: |
        cd src/frontend
        npm test

  build-docker:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.backend
        push: false
        tags: threat-oracle/backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Build frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./src/frontend
        file: ./src/frontend/Dockerfile
        push: false
        tags: threat-oracle/frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
